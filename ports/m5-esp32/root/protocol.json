{
  "cmd":"CMD_LISTDIR",
  "path":"/"
}

{
  "cmd":"CMD_READ_FILE",
  "path":"/main.py"
}

{
  "cmd":"CMD_WRITE_FILE",
  "path":"/main.py",
  "data": "import m5; m5.print('hello world', 0, 0);"
}


{
  "status": 200,
  "data": {
    "type": "REP_LISTDIR",
    "path": "/", 
    "data": ["boot.py", "main.py", "lib"]
  }, 
  "msg": ""
}

{
  "status": 200,
  "data": {
    "type": "REP_FILE_READ",
    "path": "/boot.py", 
    "data": "# This file is executed on every boot (including wake-boot from deepsleep)\r\nfrom machine import Pin\r\nimport network, _thread, upip, time\r\n\r\ndef exists(fname):\r\n try:\r\n with open(fname):\r\n pass\r\n return True\r\n except OSError:\r\n return False\r\n\r\nbtnA_pin = Pin(39, Pin.IN)\r\nbtnB_pin = Pin(38, Pin.IN)\r\nbtnC_pin = Pin(37, Pin.IN)\r\n\r\nif btnA_pin.value() == False:\r\n print('Booting Button A is hold, Enable safe mode.')\r\n if exists('main.py'):\r\n uos.rename('main.py', '_main.py')\r\nelse:\r\n if exists('_main.py'):\r\n uos.rename('_main.py', 'main.py')\r\n\r\ndef connect_wifi(params=0, params1=0):\r\n print(\"connect_wifi..\\r\\n\")\r\n sta_if = network.WLAN(network.STA_IF); sta_if.active(True);\r\n # sta_if.scan() # Scan for available access points\r\n sta_if.connect(\"MasterHax_2.4G\", \"wittyercheese551\") # Connect to an AP\r\n while (sta_if.isconnected() != True): # Check for successful connection\r\n time.sleep_ms(200)\r\n _thread.exit()\r\n gc.collect()\r\n\r\nif btnB_pin.value() == False:\r\n connect_wifi()\r\n # upip.install(\"micropython-umqtt.simple\")\r\n # while btnB_pin.value() == False:\r\n # time.sleep_ms(10);\r\n# _thread.start_new_thread( connect_wifi, (\"connect_wifi\", 1))"
  }, 
  "msg": "",
}


// Command
CMD_LISTDIR
CMD_READ_FILE

// Respond
REP_LISTDIR
REP_READ_FILE




enum BlynkCmd
{
    BLYNK_CMD_RESPONSE       = 0,
    BLYNK_CMD_REGISTER       = 1,
    BLYNK_CMD_LOGIN          = 2,
    BLYNK_CMD_SAVE_PROF      = 3,
    BLYNK_CMD_LOAD_PROF      = 4,
    BLYNK_CMD_GET_TOKEN      = 5,
    BLYNK_CMD_PING           = 6,
    BLYNK_CMD_ACTIVATE       = 7,
    BLYNK_CMD_DEACTIVATE     = 8,
    BLYNK_CMD_REFRESH        = 9,
    BLYNK_CMD_GET_GRAPH_DATA = 10,
    BLYNK_CMD_GET_GRAPH_DATA_RESPONSE = 11,

    BLYNK_CMD_TWEET          = 12,
    BLYNK_CMD_EMAIL          = 13,
    BLYNK_CMD_NOTIFY         = 14,
    BLYNK_CMD_BRIDGE         = 15,
    BLYNK_CMD_HARDWARE_SYNC  = 16,
    BLYNK_CMD_INTERNAL       = 17,
    BLYNK_CMD_SMS            = 18,
    BLYNK_CMD_PROPERTY       = 19,
    BLYNK_CMD_HARDWARE       = 20,

    BLYNK_CMD_CREATE_DASH    = 21,
    BLYNK_CMD_SAVE_DASH      = 22,
    BLYNK_CMD_DELETE_DASH    = 23,
    BLYNK_CMD_LOAD_PROF_GZ   = 24,
    BLYNK_CMD_SYNC           = 25,
    BLYNK_CMD_SHARING        = 26,
    BLYNK_CMD_ADD_PUSH_TOKEN = 27,

    //sharing commands
    BLYNK_CMD_GET_SHARED_DASH = 29,
    BLYNK_CMD_GET_SHARE_TOKEN = 30,
    BLYNK_CMD_REFRESH_SHARE_TOKEN = 31,
    BLYNK_CMD_SHARE_LOGIN     = 32,

    BLYNK_CMD_REDIRECT        = 41,

    BLYNK_CMD_DEBUG_PRINT     = 55,

    BLYNK_CMD_EVENT_LOG       = 64
};

enum BlynkStatus
{
    BLYNK_SUCCESS                = 200,
    BLYNK_QUOTA_LIMIT_EXCEPTION  = 1,
    BLYNK_ILLEGAL_COMMAND        = 2,
    BLYNK_NOT_REGISTERED         = 3,
    BLYNK_ALREADY_REGISTERED     = 4,
    BLYNK_NOT_AUTHENTICATED      = 5,
    BLYNK_NOT_ALLOWED            = 6,
    BLYNK_DEVICE_NOT_IN_NETWORK  = 7,
    BLYNK_NO_ACTIVE_DASHBOARD    = 8,
    BLYNK_INVALID_TOKEN          = 9,
    BLYNK_ILLEGAL_COMMAND_BODY   = 11,
    BLYNK_GET_GRAPH_DATA_EXCEPTION = 12,
    BLYNK_NO_DATA_EXCEPTION      = 17,
    BLYNK_DEVICE_WENT_OFFLINE    = 18,
    BLYNK_SERVER_EXCEPTION       = 19,

    BLYNK_NTF_INVALID_BODY       = 13,
    BLYNK_NTF_NOT_AUTHORIZED     = 14,
    BLYNK_NTF_ECXEPTION          = 15,

    BLYNK_TIMEOUT                = 16,

    BLYNK_NOT_SUPPORTED_VERSION  = 20,
    BLYNK_ENERGY_LIMIT           = 21
};